package client

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"os"
)

type Config struct {
	BaseUrl     string `json:"baseurl"`
	AccountPath string `json:"account"`
	CvePath     string `json:"cve"`
	CwePath     string `json:"cwe"`
	VendorsPath string `json:"vendors"`
	ReportsPath string `json:"reports"`
	AlertsPath  string `json:"alerts"`
}

// idk if theres a better way to use getter methods **shrug**

type Credentials struct {
	Username string `json:"user"`
	Password string `json:"pass"`
}

// getter methods because i dont know a better way lol

func readConfig() Config {
	// Reading the config file 'config.json'
	configFile, err := os.Open("config.json")
	if err != nil {
		log.Fatal("Error reading config file: ", err)

	}
	defer configFile.Close()

	byteValue, _ := ioutil.ReadAll(configFile)

	var config Config

	json.Unmarshal(byteValue, &config)

	return config

}

func readCredentials() Credentials {
	// Reading the credentials file 'credentials.json'
	credFile, err := os.Open("credentials.json")
	if err != nil {
		log.Fatal("Error reading config file: ", err)

	}
	defer credFile.Close()

	byteValue, _ := ioutil.ReadAll(credFile)

	var creds Credentials

	json.Unmarshal(byteValue, &creds)

	return creds
}

func GetCveByVendor(vendor string, page string) string {

	creds := readCredentials()
	config := readConfig()

	cveReqUrl := config.BaseUrl + config.CvePath

	req, err := http.NewRequest(http.MethodGet, cveReqUrl, nil)
	if err != nil {
		log.Fatal("error building request: ", err)

	}

	req.SetBasicAuth(creds.Username, creds.Password)
	req.Header.Add("page", page)
	req.Header.Add("vendor", vendor)
	req.Header.Add("Accept", "application/json")

	res, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal("error performing request: ", err)
	}

	response, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Fatal("error reading: ", err)
	}
	returnString := string(response[:])
	return returnString

}
